@inject HttpClient Http
@inject NavigationManager navigationManager
 

<div class="container" style="background: white; max-width: 700px; ">

    <div class="row">

        <div class="col-12">
            <br />
            <div class="align_center">
                <h3 style="color: #2b3940">
                    Un momento!
                </h3>
                <p style="font-size: 15px;font-weight: bold;">Por favor, Elije tu pregunta de seguridad y respondela para poder continuar.</p>
            </div>

        </div>
    </div>
</div>

<br />
<div class="container" style="background: white; max-width: 1000px; min-width:200px">

    <div class="row">

        <div class="col-12" style="box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); border-radius: 4px; margin: 10px 10px 10px 10px; padding: 15px; ">
            <br />
            <EditForm Model="modelo" OnValidSubmit="PSeguridadMetodo" class="form_type_1 type_2">
                <DataAnnotationsValidator />

                <div class="row">
                    <div class="col-md-4" style="margin-bottom:10px">
                        <label style="font-size: 15px; font-weight: bold; color: #2b3940 ">Pregunta de seguridad</label>
                    </div>
                    <div class="col-md-8" style="margin-bottom:20px">
                        @if (preguntas.Count != 0)
                        {
                            <div class="control-group">

                                <div class="custom_select">
                                    <InputSelect @bind-Value="@modelo.idPreguntaSeguridad" class="cambio_color custom_select select_title" style="width: 100%; height: 40px; color: #000000 ">
                                        <option value="" selected>Seleccione una pregunta</option>
                                        @foreach (var item in preguntas)
                                        {
                                            <option value="@item.Id">@item.descripcion</option>
                                        }

                                    </InputSelect>
                                    <ValidationMessage For="@(() => modelo.idPreguntaSeguridad)" />
                                </div>
                            </div>
                        }
                    </div>


                    <div class="col-lg-12" style="margin-bottom:-20px"><br></div>
                    @*esta es de las respuesta*@
                    <div class="col-md-4" style="margin-bottom:10px">
                        <label style="font-size: 15px; font-weight: bold; color: #2b3940 ">Respuesta</label>
                    </div>

                    <div class="col-md-8" style="margin-bottom:10px">
                        <InputText style="color: #000000;" class="cambio_color" id="id_resp" placeholder="Respuesta" @bind-Value="@modelo.respuesta" />
                        <ValidationMessage For="@(() => modelo.respuesta)" />
                    </div>

                    <div class="col-md-4">
                        <br />
                        <div class="align_center">
                            <button type="submit" class="button type1" style="width:100%">
                                <span><span style="color:white">Guardar</span><span>Guardar</span></span>
                            </button>

                        </div>
                    </div>

                </div>


                <br />

            </EditForm>




        </div>
    </div>
</div>

 

@code {
 
    [Parameter] public EventCallback<PreguntasSeguridadDto> MetodoGuardarPreguntas { get; set; }


    //datos personales
    List<Pregunta_Seguridad> preguntas = new List<Pregunta_Seguridad>();
    PreguntasSeguridadDto modelo = new PreguntasSeguridadDto();

     


    protected override async Task OnInitializedAsync()
    {
      
        try
        {

            var response = await Http.GetAsync("api/PreguntasSeguridad/tener/preguntas");
            response.EnsureSuccessStatusCode();

            preguntas = await response.Content.ReadFromJsonAsync<List<Pregunta_Seguridad>>();

        }
        catch (Exception ex)
        {
            navigationManager.NavigateTo("logout");
        }
    }

    private async Task PSeguridadMetodo()
    {
 
        await MetodoGuardarPreguntas.InvokeAsync(modelo);
 
    }

}
